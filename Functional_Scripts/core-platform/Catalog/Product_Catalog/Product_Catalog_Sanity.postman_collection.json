{
	"info": {
		"_postman_id": "12345678-1234-5678-9012-123456789012",
		"name": "Product Catalog REST API",
		"description": "Comprehensive functional testing collection for the Product Catalog REST API.\n\nThis collection includes:\n- All CRUD operations for products\n- Search and category filtering\n- Error handling scenarios\n- Data validation tests\n- Performance and edge cases\n\nBase URL: http://localhost:8081\nAPI Version: v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Product Management",
			"item": [
				{
					"name": "Create Product - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains product data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('sku');",
									"    pm.expect(jsonData.data).to.have.property('price');",
									"    pm.expect(jsonData.data).to.have.property('created_at');",
									"    pm.expect(jsonData.data).to.have.property('updated_at');",
									"});",
									"",
									"pm.test(\"Product is active by default\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.is_active).to.eql(true);",
									"});",
									"",
									"// Store product ID for later tests",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"product\", jsonData.data.id);",
									"    pm.environment.set(\"product_sku\", jsonData.data.sku);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"iPhone 15 Pro\",\n  \"description\": \"Latest iPhone with advanced features and A17 Pro chip\",\n  \"price\": 1199.99,\n  \"category\": \"Electronics\",\n  \"brand\": \"Apple\",\n  \"sku\": \"IPH15PRO001\",\n  \"stock\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Duplicate SKU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error message mentions duplicate SKU\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"SKU already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Samsung Galaxy S24\",\n  \"description\": \"Android flagship phone\",\n  \"price\": 999.99,\n  \"category\": \"Electronics\",\n  \"brand\": \"Samsung\",\n  \"sku\": \"IPH15PRO001\",\n  \"stock\": 30\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error message mentions invalid request body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Invalid request body\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Product\",\n  \"price\": 99.99,\n  \"category\": \"Electronics\",\n  \"sku\": \"INVALID\",\n  // This comment makes it invalid JSON\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains products array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        var product = jsonData.data[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('sku');",
									"        pm.expect(product).to.have.property('price');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains product data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get('product_id'));",
									"});",
									"",
									"pm.test(\"Product has correct structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"    pm.expect(jsonData.data).to.have.property('price');",
									"    pm.expect(jsonData.data).to.have.property('category');",
									"    pm.expect(jsonData.data).to.have.property('brand');",
									"    pm.expect(jsonData.data).to.have.property('sku');",
									"    pm.expect(jsonData.data).to.have.property('stock');",
									"    pm.expect(jsonData.data).to.have.property('is_active');",
									"    pm.expect(jsonData.data).to.have.property('created_at');",
									"    pm.expect(jsonData.data).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error message mentions not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/non-existent-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"non-existent-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product - Partial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Product price was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.price).to.eql(1099.99);",
									"});",
									"",
									"pm.test(\"Product stock was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.stock).to.eql(45);",
									"});",
									"",
									"pm.test(\"Updated timestamp changed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.updated_at).to.not.eql(jsonData.data.created_at);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 1099.99,\n  \"stock\": 45\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error message mentions not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 999.99\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products/non-existent-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"non-existent-id"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search & Filter",
			"item": [
				{
					"name": "Search Products - Valid Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains search results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Search results contain query term\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        var product = jsonData.data[0];",
									"        pm.expect(product.name.toLowerCase()).to.include('iphone');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/search?q=iPhone",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "iPhone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Products - No Query Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error message mentions required query parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"Query parameter 'q' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains category results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products belong to requested category\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(product) {",
									"            pm.expect(product.category.toLowerCase()).to.eql('electronics');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/category/Electronics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"category",
								"Electronics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products by Category - Empty Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains empty array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/category/NonExistentCategory",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"category",
								"NonExistentCategory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Setup",
			"item": [
				{
					"name": "Create Multiple Test Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Samsung Galaxy S24\",\n  \"description\": \"Android flagship smartphone with advanced AI features\",\n  \"price\": 899.99,\n  \"category\": \"Electronics\",\n  \"brand\": \"Samsung\",\n  \"sku\": \"SAM-GS24-001\",\n  \"stock\": 75\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Laptop Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Store laptop ID for deletion test",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"laptop_id\", jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"MacBook Pro 16-inch\",\n  \"description\": \"Professional laptop with M3 Pro chip and stunning display\",\n  \"price\": 2499.99,\n  \"category\": \"Electronics\",\n  \"brand\": \"Apple\",\n  \"sku\": \"MBP16-M3PRO-001\",\n  \"stock\": 25\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Clothing Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Classic Cotton T-Shirt\",\n  \"description\": \"Comfortable 100% cotton t-shirt in various colors\",\n  \"price\": 29.99,\n  \"category\": \"Clothing\",\n  \"brand\": \"BasicWear\",\n  \"sku\": \"TSHIRT-COTTON-001\",\n  \"stock\": 100\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup & Deletion",
			"item": [
				{
					"name": "Delete Product - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Success message confirms deletion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/{{laptop_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{laptop_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error message mentions not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/non-existent-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"non-existent-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Deletion - Get Deleted Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Product no longer exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.error).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/{{laptop_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{laptop_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performance & Edge Cases",
			"item": [
				{
					"name": "Search with Special Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response handles special characters gracefully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/products/search?q=@#$%^&*()",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "@#$%^&*()"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with All Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All fields were updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql(\"iPhone 15 Pro Max Updated\");",
									"    pm.expect(jsonData.data.description).to.eql(\"Updated description with new features\");",
									"    pm.expect(jsonData.data.price).to.eql(1299.99);",
									"    pm.expect(jsonData.data.category).to.eql(\"Mobile Devices\");",
									"    pm.expect(jsonData.data.brand).to.eql(\"Apple Inc.\");",
									"    pm.expect(jsonData.data.stock).to.eql(35);",
									"    pm.expect(jsonData.data.is_active).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"iPhone 15 Pro Max Updated\",\n  \"description\": \"Updated description with new features\",\n  \"price\": 1299.99,\n  \"category\": \"Mobile Devices\",\n  \"brand\": \"Apple Inc.\",\n  \"stock\": 35,\n  \"is_active\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Large Product Name Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Large product name handled correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.have.length.greaterThan(100);",
									"});",
									"",
									"// Store for cleanup",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"large_product_id\", jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"This is a very long product name that tests the system's ability to handle extended text strings and ensure proper data validation and storage capabilities work correctly with larger input sizes\",\n  \"description\": \"Test product with extremely long name to validate system limits\",\n  \"price\": 99.99,\n  \"category\": \"Test\",\n  \"brand\": \"TestBrand\",\n  \"sku\": \"LONG-NAME-TEST-001\",\n  \"stock\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8081');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to ensure response time is reasonable",
					"pm.test(\"Response time is less than 1000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"});",
					"",
					"// Global test to ensure Content-Type is JSON for API responses",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
}
